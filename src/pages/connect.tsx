import { type NextPage } from "next";
import { unstable_getServerSession } from "next-auth";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { Button } from "../components/common/Button/Button";
import Header from "../components/common/Header/Header";
import { authOptions } from "./api/auth/[...nextauth]";
import { RustPlus } from "@rustmeta/rustplus-ts";

const Dashboard: NextPage = () => {
  const rustPlusApi = new RustPlus(
    "45.88.228.66",
    28017,
    "76561198406605683",
    446829116
  );
  rustPlusApi.on("connected", () => {
    // ready to send requests
    rustPlusApi.sendTeamMessage("Hello from rustplus.js!");
  });
  rustPlusApi.on("connecting", () => {
    console.log("connecting");
  });
  rustPlusApi.on("error", (error: string) => {
    console.log(error);
    console.log("error");
  });

  const handleConnectButton = () => {
    rustPlusApi.connect();
  };

  const { data: session } = useSession();
  return (
    <>
      <Head>
        <title>Rust Companion App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <meta name="viewport" content="initial-scale=1, width=device-width" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header session={session!} />
      <header className="bg-white shadow">
        <div className="mx-auto max-w-7xl py-6 px-4 sm:px-6 lg:px-8">
          <h1 className="text-3xl font-bold tracking-tight text-gray-900">
            Connect Rust<span className="text-red-400">+</span>
          </h1>
        </div>
      </header>
      <main>
        <div className="mx-auto max-w-7xl py-6 sm:px-6 lg:px-8">
          <div className="px-4 py-6 sm:px-0">
            <div className="h-96 rounded-lg">
              <Button type="button" onClick={handleConnectButton}>
                Connect to Rust+ API
              </Button>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Dashboard;

export async function getServerSideProps(context: any) {
  const session = await unstable_getServerSession(
    context.req,
    context.res,
    authOptions
  );

  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  } else {
    return { props: {} };
  }
}

// const socketInitializer = () => {
//   const socket = new WebSocket("ws://45.88.228.66:28017");

//   socket.addEventListener("open", () => {
//     console.log("connected");
//     //@ts-ignore
//     sendTeamMessage("Hola desde Rust+ API");
//     // sendRequest(
//     //   {
//     //     getInfo: {},
//     //   },
//     //   (message) => {
//     //     console.log(message);
//     //   }
//     // );
//   });
//   socket.addEventListener("close", () => {
//     console.log("disconnected");
//   });
//   socket.addEventListener("error", (error) => {
//     console.log("error", error);
//   });
//   socket.addEventListener("message", (message) => {
//     load(_resolve(process.cwd(), "rustplus.proto")).then((root) => {
//       const AppRequest = root.lookupType("rustplus.AppRequest");
//       const AppMessage = root.lookupType("rustplus.AppMessage");

//       console.log(message);
//       const decodedMessage = AppMessage.decode(new Uint8Array(message.data));
//       console.log(JSON.stringify(decodedMessage, null, 4));
//       console.log(
//         "message: ",
//         AppMessage.decode(new Uint8Array(message.data))
//       );
//     });
//   });
//   const handleRequest = () => {
//     load(_resolve(process.cwd(), "rustplus.proto")).then((root) => {});
//   };
//   const sendRequest = (data: any, callback: (callback: any) => void) => {
//     load(_resolve(process.cwd(), "rustplus.proto")).then((root) => {
//       const playerId = "76561198406605683";
//       const playerToken = "446829116";
//       const AppRequest = root.lookupType("rustplus.AppRequest");
//       let seq = 0;
//       let seqCallbacks = [];
//       let currentSeq = ++seq;
//       if (callback) {
//         seqCallbacks[currentSeq] = callback;
//       }
//       let request = AppRequest.fromObject({
//         seq: currentSeq,
//         playerId: playerId,
//         playerToken: playerToken,
//         ...data,
//       });
//       socket.send(AppRequest.encode(request).finish());
//       console.log("request sent: ", request, AppRequest.encode(request));
//     });
//   };
//   const sendTeamMessage = (message: string, callback: () => void) => {
//     sendRequest(
//       {
//         sendTeamMessage: {
//           message: message,
//         },
//       },
//       callback
//     );
//   };
// };
